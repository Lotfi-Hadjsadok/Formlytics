generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id
  name           String
  email          String        @unique
  emailVerified  Boolean       @default(false)
  image          String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  accounts       Account[]
  sessions       Session[]
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull)

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id               String          @id @default(cuid())
  name             String
  paddleCustomerId String?         @unique
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  users            User[]
  subscriptions    Subscriptions[]
  transactions     Transactions[]
  forms            Form[]

  @@map("organizations")
}

model Subscriptions {
  subscriptionId     String       @id
  subscriptionStatus String
  priceId            String
  productId          String
  scheduledChange    String
  organizationId     String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  organization       Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model Transactions {
  transactionId  String       @id
  status         String
  amount         String
  currencyCode   String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Form {
  id             String      @id @default(cuid())
  title          String
  description    String?
  fields         Json        // Store form field configuration as JSON
  settings       Json?       // Store form settings as JSON
  styling        Json?       // Store form styling as JSON
  embedding      Json?       // Store embedding settings as JSON (allowedOrigins, tabSpecific, etc.)
  thankYouPage   Json?       // Store thank you page settings as JSON (icon, title, text)
  isActive       Boolean     @default(true)
  organizationId String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  entries        FormEntry[]

  @@map("forms")
}

model FormEntry {
  id        String   @id @default(cuid())
  formId    String
  answers   Json     // Store form responses as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  form      Form     @relation(fields: [formId], references: [id], onDelete: Cascade)

  @@map("form_entries")
}
